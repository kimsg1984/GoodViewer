{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Lo",
				"Logger"
			],
			[
				"DF_",
				"DF_TEXT	statement"
			],
			[
				"DF",
				"DF_FILENAME	statement"
			],
			[
				"Get",
				"GetBitmap	function"
			],
			[
				"is",
				"isfile	function"
			],
			[
				"opt",
				"optionparser	optionparser"
			],
			[
				"Op",
				"OpenFolder"
			],
			[
				"folder",
				"folder_flip"
			],
			[
				"whi",
				"which_way_to_go	statement"
			],
			[
				"next",
				"nextFolder	function"
			],
			[
				"fo",
				"folder_flip	statement"
			],
			[
				"li",
				"listdir	function"
			],
			[
				"Im",
				"ImageCtrl	statement"
			],
			[
				"save",
				"save_folder_jackpum	statement"
			],
			[
				"save_fo",
				"save_folder_jackpum	statement"
			],
			[
				"Main",
				"MainClass"
			],
			[
				"ch",
				"chapter_and_verse	statement"
			],
			[
				"cont",
				"content_per_line"
			],
			[
				"debug",
				"debug_mode	statement"
			],
			[
				"file",
				"file_name	param"
			],
			[
				"anoth",
				"another_file_name	statement"
			],
			[
				"fil",
				"filename	statement"
			],
			[
				"pa",
				"path	module"
			],
			[
				"com",
				"comment	param"
			],
			[
				"d",
				"download_file	function"
			],
			[
				"t",
				"telepot	module"
			],
			[
				"__",
				"__file__	instance"
			],
			[
				"list",
				"list_name	statement"
			],
			[
				"con",
				"configparser	module"
			],
			[
				"re",
				"recipe_file	param"
			],
			[
				"get",
				"getcwd	function"
			],
			[
				"cmd",
				"cmd_line"
			],
			[
				"user",
				"username"
			],
			[
				"no",
				"nodeManager	class"
			],
			[
				"ex",
				"exclude	statement"
			],
			[
				"cu",
				"current_dir	statement"
			],
			[
				"bin",
				"bin_path	statement"
			],
			[
				"dir_b",
				"dir_binarybox	statement"
			],
			[
				"i",
				"islink	function"
			],
			[
				"bi",
				"binaries	statement"
			],
			[
				"dir",
				"dir_bin	statement"
			],
			[
				"gen",
				"generate_bin_others	function"
			],
			[
				"genera",
				"generate_bin_others	function"
			],
			[
				"gene",
				"generate_binary	function"
			],
			[
				"path",
				"pathjoin"
			],
			[
				"acce",
				"access_key"
			],
			[
				"def",
				"def	Function"
			],
			[
				"ip",
				"ip_address	statement"
			],
			[
				"in",
				"insert	function"
			],
			[
				"return_list_b",
				"return_list_by_client_name	function"
			],
			[
				"return_list_",
				"return_list_by_mac	function"
			],
			[
				"print_list_b",
				"print_list_by_client_name	function"
			],
			[
				"print_list_by",
				"print_list_by_mac	function"
			],
			[
				"dhcpd",
				"dhcpd_conf"
			],
			[
				"tab",
				"tab_count_min	statement"
			],
			[
				"retu",
				"return_list	param"
			],
			[
				"ser",
				"server_names	statement"
			],
			[
				"dhcp",
				"dhcpd_conf"
			],
			[
				"ret",
				"return_list	param"
			],
			[
				"print",
				"print_list	function"
			],
			[
				"dh",
				"dhcp_servers	statement"
			],
			[
				"server",
				"server_names"
			],
			[
				"ren",
				"renew_dhcp_list	function"
			],
			[
				"dhc",
				"dhcp_ips	statement"
			],
			[
				"DHCP",
				"DHCP_Manager	class"
			],
			[
				"return_list",
				"return_list_by_ip"
			],
			[
				"gr",
				"group_dhcpd_conf	statement"
			],
			[
				"lis",
				"list_by_name	statement"
			],
			[
				"DH",
				"DHCP_Server	class"
			],
			[
				"di",
				"dictionary_to_add	param"
			],
			[
				"oid",
				"oid_dictionary"
			],
			[
				"ot",
				"optionparser	optionparser"
			],
			[
				"log",
				"log_parsing	function"
			],
			[
				"start",
				"start_time"
			],
			[
				"cli",
				"client_name	statement"
			],
			[
				"date",
				"datetime	class"
			],
			[
				"le",
				"lease_list	statement"
			],
			[
				"_",
				"_test	statement"
			],
			[
				"off",
				"offset_file"
			],
			[
				"L",
				"LogTail	class"
			],
			[
				"c_",
				"c_split	statement"
			],
			[
				"cm",
				"cmd_location	statement"
			],
			[
				"curre",
				"current_verb	statement"
			],
			[
				"Ele",
				"Element_bible"
			],
			[
				"El",
				"Element_book"
			],
			[
				"E",
				"Element	class"
			],
			[
				"boo",
				"book_abbri_eng	statement"
			],
			[
				"book",
				"book_abbri_ko	statement"
			],
			[
				"bibl",
				"bible_text_file"
			],
			[
				"In",
				"IndexError	class"
			],
			[
				"w",
				"write	function"
			],
			[
				"ET",
				"ElementTree"
			],
			[
				"Elem",
				"ElementTree"
			],
			[
				"Et",
				"ElementTree"
			],
			[
				"pic",
				"picture_w"
			],
			[
				"win",
				"window_h"
			],
			[
				"S",
				"SERVER_NAME"
			],
			[
				"echo",
				"echoHelp"
			],
			[
				"res",
				"result_by_location"
			],
			[
				"Fil",
				"FileManager"
			],
			[
				"info",
				"info_list"
			],
			[
				"stor",
				"store_code"
			],
			[
				"to",
				"totom_command_key"
			],
			[
				"current_",
				"current_window_id"
			],
			[
				"tot",
				"totem_window_title"
			],
			[
				"gre",
				"greek_text_and_parsing"
			],
			[
				"or",
				"order"
			],
			[
				"ini",
				"initiolization"
			],
			[
				"b",
				"book_short_code"
			],
			[
				"bo",
				"book_tag"
			],
			[
				"pre",
				"preffix"
			],
			[
				"ta",
				"take_snapshot"
			],
			[
				"tak",
				"takeAllSnapShot"
			],
			[
				"jail",
				"jail_delay"
			],
			[
				"J",
				"JAIL_TIME"
			],
			[
				"event_",
				"event_name"
			],
			[
				"ev",
				"event_time"
			],
			[
				"text",
				"text_file"
			],
			[
				"time",
				"time_end"
			],
			[
				"last",
				"last_verse"
			],
			[
				"parse",
				"parsed"
			],
			[
				"par",
				"parsing_code"
			],
			[
				"las",
				"last_verse"
			],
			[
				"last_ver",
				"last_verse"
			],
			[
				"la",
				"last_chapter"
			],
			[
				"r",
				"robinson"
			],
			[
				"num",
				"book_number"
			],
			[
				"mor",
				"morphgnt_rows"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Author: SunGyo Kim\n# Email: Kimsg1984@gmail.com\n# irc.freenode #ubuntu-ko Sungyo\n\n'''\nMVP방식. 매뉴바에서 부모 클래스인 패널에 명령을 하면, 패널에서 ImageCtrl로 명렁을 넣어 ImageCtrl에서 조작을 한다\n'''\n\nimport wx\nimport sys\nreload(sys)\nsys.setdefaultencoding('utf-8')\n\n## Application Module ##\nimport View.ViewerPanel\nimport View.ThumbScrollPanel\nimport MenuBar.ViewerMenuBar\nimport MenuBar.ThumbScrollMenuBar\nimport imageCtrl\ntitle = \"Good Viewer\"\n\nclass ViewerFrame(wx.Frame):\n	def __init__(self,parent, ImageCTRL):\n		wx.Frame.__init__(self, None, title=title)\n		self.ImageCtrl = ImageCTRL\n		self.parentClass = parent\n		self.SetMinSize((400, 400))\n		self.ViewerPanel = View.ViewerPanel.ViewerPanel(self, self.ImageCtrl)\n		self.ViewerMenuBar = MenuBar.ViewerMenuBar.ViewerMenuBar(self, self.ViewerPanel)\n		self.ViewerPanel.Show()\n		self.sizer = wx.BoxSizer(wx.VERTICAL)\n		self.sizer.Add(self.ViewerPanel, 1, wx.GROW | wx.ALL)\n		self.ViewerMenuBar.showMenuBar()\n		self.SetSizer(self.sizer)\n		self.Center()\n\n	def show(self, filename = None, switch = False):\n		if filename : self.ViewerMenuBar.openFile(filename)\n		self.ViewerMenuBar.switch(switch)\n		self.sizer.Fit(self)\n		self.SetFocus()\n		self.Show()\n\n	def hide(self):\n		self.Hide()\n\n	def switchToThumbnailCtrl(self, dir = None):\n		self.parentClass.activeThumbnailCtrl(dir)\n		self.hide()\n\nclass ThumbnailCtrlFrame(wx.Frame):\n	def __init__(self, parent, ImageCTRL):\n		wx.Frame.__init__(self, None, title=title)\n		self.ImageCtrl = ImageCTRL\n		self.parentClass = parent\n		self.ThumbScrollPanel = View.ThumbScrollPanel.ThumbScrollPanel(self, self.ImageCtrl)\n		self.ThumbScrollMenuBar = MenuBar.ThumbScrollMenuBar.ThumbScrollMenuBar(self, self.ThumbScrollPanel)\n		self.ThumbScrollMenuBar.showMenuBar()\n		self.sizer = wx.BoxSizer(wx.VERTICAL)\n		self.sizer.Add(self.ThumbScrollPanel, 1, wx.GROW | wx.ALL)\n		self.SetSizer(self.sizer)\n\n	def show(self, dir = None):\n		self.SetFocus()\n		if dir: self.ThumbScrollPanel.showDir(dir)\n		self.Show()\n\n\n	def hide(self):\n		self.Hide()\n\n	def switchToViewer(self, filename = None):\n		self.parentClass.activeViewer(filename, switch = True)\n		self.hide()\n		# self.show()\n\nclass myApp(wx.PySimpleApp):\n	def __init__(self):\n		wx.PySimpleApp.__init__(self)\n		self.ImageCtrl = imageCtrl.ImageCtrl()\n\n	def activeViewer(self, filename=None, switch = False):\n		try: self.Viewerframe.show(filename, switch)\n		except AttributeError:\n			self.Viewerframe = ViewerFrame(self, self.ImageCtrl)\n			self.Viewerframe.show(filename, switch)\n			self.Viewerframe.Center()\n\n		try: self.ThumbnailCtrlFrame.hide()\n		except AttributeError: pass\n\n	def activeThumbnailCtrl(self, dir=None):\n		try: self.ThumbnailCtrlFrame.show(dir)\n		except AttributeError:\n			self.ThumbnailCtrlFrame = ThumbnailCtrlFrame(self, self.ImageCtrl)\n			self.ThumbnailCtrlFrame.show(dir)\n\n		try: self.Viewerframe.hide()\n		except AttributeError: pass\n\nif __name__ == \"__main__\":\n	## Parser Setting ##\n	filename=None\n	argv = __import__('sys').argv\n	usage = u\"Usage: %prog [options]\"\n	parser = __import__('optparse').OptionParser(usage)\n\n	## Parser Option ##	\n	parser.add_option('-d', '--debug', dest='debug', action='store_true', help=u'debug mode')\n	\n	## command logic  ##\n	(opt, argv) = parser.parse_args(argv)\n	if opt.debug:\n		# filename = '/home/sungyo/Unison/2016/신대원수업/1학기/공관복음/1.png'\n		filename = '/home/sungyo/ImageofGod/작품겔러리/2K™/20130930_1380468745_KIM_1941_2.jpg'\n	if len(argv) >= 2: filename = argv[1]\n\n	app = myApp()\n	if filename:app.activeViewer(filename)\n	else: app.activeThumbnailCtrl()\n	app.MainLoop()",
			"file": "GoodViewer.py",
			"file_size": 3680,
			"file_write_time": 1496722335000000,
			"settings":
			{
				"buffer_size": 3555,
				"line_ending": "Unix"
			}
		},
		{
			"file": "View/ViewerPanel.py",
			"settings":
			{
				"buffer_size": 11142,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Author: SunGyo Kim\n# Email: Kimsg1984@gmail.com\n# irc.freenode #ubuntu-ko Sungyo\n\nimport os\nimport re\nimport wx\nimport StringIO\nimport urllib2\nimport sys\nimport random\nreload(sys)\n\n## 커스텀 모듈 ####\npymodule_path='/home/sungyo/Unison/script/module/python'\nsys.path.append(pymodule_path)\n# sys.path.append('../') # for debuging\n\nimport IO\nConfig = IO.Shelve(filename='./Data/gooviewer_config.dat')\nLog	= IO.Log(log_name='ImageCtrl', filelogging=False)\n\nimport TRASH\nTrash = TRASH.Trash()\n\n#################\n\nimport Data.WildCard\nwildcard = Data.WildCard.getKeywords()\nwildcard_on_listdir = wildcard[1]\n\nclass ImageCtrl():\n	def __init__(self):\n		self.__setClassValues()\n\n	def __setClassValues(self):\n		self.throwed_file = []\n		self.wildcard = '.(%s)' %wildcard_on_listdir\n		self.which_way_to_go 	= True\n		self.folder_flip 		= False\n		self.should_flip_folder 	= False\n		self.setClassValuesDefauts()\n\n	def setClassValuesDefauts(self):\n		self.pic_files 	= []\n		self.pic_dir 	= ''\n		self.current_filename = ''\n\n		self.current_num = 0\n		self.next_num 	= 0\n		self.pre_num 	= 0\n		self.total_pictures= 0\n\n		self.current_img 	= None\n		self.next_img 	= None\n		self.pre_img 	= None\n\n	def _get_CurrentFileName(self):\n		if self.pic_files:\n			filename = self.pic_files[self.current_num]\n			return filename\n		else:\n			return False\n\n	def _get_CurrentDir(self):\n		if self.pic_dir: return self.pic_dir\n		else: return False\n\n	## WORK FUNCTION ##\n\n	def filePathFromPicNumber(self, number):\n		file_name = self.pic_files[number]\n		file_path = os.path.join(self.pic_dir, file_name)\n		return file_path\n\n	def deleteImage(self): \n		current_path = os.path.join(self.pic_dir, self.pic_files[self.current_num])\n		current_path = str(unicode(current_path))\n		current_path_incoded = urllib2.quote(current_path)\n	\n		if not Trash.put(current_path): return None\n		self.throwed_file.append(current_path)\n		\n		if 1 < self.total_pictures:\n			if self.which_way_to_go: next_num = self.nextPicGettingNum(self.current_num)\n			else : next_num = self.previousPicGettingNum(self.current_num)\n			next_pic_path = self.filePathFromPicNumber(next_num)\n			self.updateImages(next_pic_path)\n		else:\n			if self.folder_flip:\n				self.nextFolder()\n			else:\n				self.setClassValuesDefauts()\n		return True\n\n	def restoreImage(self):\n		if self.throwed_file:\n			restore_file_name = self.throwed_file.pop()\n			restore_file_path = os.path.join(self.pic_dir, restore_file_name)\n			if Trash.search(restore_file_path):\n				file_name_in_trash = Trash.search(restore_file_path)[0][1]\n				Trash.restore(file_name_in_trash)\n				\n				self.updateImages(restore_file_path) # 이미지 가져와서 던질것!!!\n			else: return False\n		else: return False\n\n	def loadImage(self):\n		\"\"\"\n		이미지 불러오기, next Picture와 previous Picture 처리\n		\"\"\"\n		number 	= self.current_num\n\n		if len(self.pic_files) is 0:\n			if self.folder_flip:\n				if self.which_way_to_go:\n					self.nextFolder()\n				else:\n					self.previousFolder()\n\n		filename 	= self.pic_files[number]\n		self.current_filename = filename\n		\n		# print filename\n		if not self.current_img : self.current_img = self.gettingImgForPanel(filename)\n\n		# self.imageOnPanel(self.current_img)\n		return self.current_img\n		## second, prepare the Previous and Next pictures ##\n\n	def gettingImgForPanel(self, filename):\n		## class instance \n		dir = self.pic_dir\n		image_path = os.path.join(dir, filename)\n		if wx.Image.CanRead(filename=image_path):\n			img = wx.Image(name=image_path)\n		else:\n			img = wx.EmptyImage(200, 200)\n		return img\n\n	def preparePictures(self):\n		\"\"\"\n		next_picture  와 pre_picture 불러놓기\n		\"\"\"\n		## class instance ##\n		next_pic_path 	= self.pic_files[self.next_num]\n		pre_pic_path 	= self.pic_files[self.pre_num]\n\n		if not self.next_img : self.next_img = self.gettingImgForPanel(next_pic_path)\n		if not self.pre_img : self.pre_img = self.gettingImgForPanel(pre_pic_path) \n		\n		return True\n\n	def nextPicture(self):\n		\"\"\"\n		Loads the next picture in the directory\n		\"\"\"\n		if self.folder_flip is True:\n			if self.current_num == self.total_pictures - 1:\n				if self.total_pictures > 1:\n					self.nextFolder()\n					return True\n\n			if self.total_pictures is 1:\n				self.nextFolder()\n				return True\n\n		self.pre_num, self.current_num, self.next_num = self.current_num, self.next_num, self.nextPicGettingNum(self.next_num)\n		self.pre_img, self.current_img, self.next_img = self.current_img, self.next_img, None\n		self.which_way_to_go = True\n\n		return True\n\n	def nextPicGettingNum(self, current_num):\n		if current_num == self.total_pictures - 1:\n			next_num = 0\n		else:\n			next_num = current_num + 1\n\n		return next_num\n\n	def previousPicture(self):\n		\"\"\"\n		Displays the previous picture in the directory\n		\"\"\"\n		if self.folder_flip is True:\n			if self.current_num == 0:\n				if self.total_pictures is not 1:\n					self.previousFolder()\n					return True\n\n			if self.total_pictures is 1:\n				self.previousFolder()\n				return True\n\n		self.pre_num, self.current_num, self.next_num = self.previousPicGettingNum(self.pre_num), self.pre_num, self.current_num\n		self.pre_img, self.current_img, self.next_img = None, self.pre_img, self.current_img\n		self.which_way_to_go = False\n\n		\n		return True\n\n	def previousPicGettingNum(self, current_num):\n		if current_num == 0:\n			pre_num = self.total_pictures - 1\n		else:\n			pre_num = current_num - 1\n		return pre_num\n\n	def nextFolder(self): \n		dir = os.path.dirname(self.pic_dir)\n		dir_name = os.path.split(dir)[-1]\n		dir_parent = os.path.split(dir)[0]\n		for f in os.walk(dir_parent): \n			dir_list = f[1]\n			break\n		dir_list.sort()\n		dir_index = dir_list.index(dir_name)\n		dir_len = len(dir_list)\n		count = 0\n		while count <= dir_len -1:\n			dir_index += 1\n			count += 1\n			if dir_index >= dir_len :\n				dir_index = 0\n			next_dir = os.path.join(dir_parent, dir_list[dir_index])\n			next_dir_list = os.listdir(next_dir)\n			pic_files = []\n			for l in next_dir_list:\n				if len(re.findall(r'%s$' %(self.wildcard),l)) > 0:\n					# print(os.path.join(next_dir, l))\n					pic_files.append(l)\n			\n			if len(pic_files) > 0:\n				count = dir_len\n				pic_files.sort()\n				self.updateImages(os.path.join(next_dir, pic_files[0]))\n\n	def previousFolder(self): \n		dir = os.path.dirname(self.pic_dir)\n		dir_name = os.path.split(dir)[-1]\n		dir_parent = os.path.split(dir)[0]\n		for f in os.walk(dir_parent): \n			dir_list = f[1]\n			break\n		dir_list.sort()\n		dir_index = dir_list.index(dir_name)\n		dir_len = len(dir_list)\n		count = 0\n		while count <= dir_len -1:\n			dir_index -= 1\n			count += 1\n			if dir_index == 0 :\n				dir_index = dir_len -1\n			next_dir = os.path.join(dir_parent, dir_list[dir_index])\n			next_dir_list = os.listdir(next_dir)\n			pic_files = []\n			for l in next_dir_list:\n				if len(re.findall(r'%s$' %(self.wildcard),l)) > 0:\n					pic_files.append(l)\n\n			if len(pic_files) > 0:\n				count = dir_len\n				pic_files.sort()\n				self.updateImages(os.path.join(next_dir, pic_files[-1]))\n\n	def updateImages(self, file_path):\n		\"\"\"\n		Updates the pic_files list to contain the current folder's images\n		\"\"\"\n		self.setClassValuesDefauts()\n		index_file = file_path.split('/')[-1]\n		folder_path = file_path.split(index_file)[0]\n		self.pic_dir = folder_path\n		self.pic_files = []\n\n		for l in os.listdir(self.pic_dir):\n			if len(re.findall(r'%s$' %(self.wildcard),l)) > 0:\n				Log.Logger.debug(re.findall(r'%s$' %(self.wildcard),l))\n				self.pic_files.append(l)\n\n		Log.Logger.debug(self.pic_files)\n		self.pic_files.sort()\n		self.total_pictures = len(self.pic_files)\n\n		self.current_num =self.pic_files.index(index_file)\n		self.next_num = self.nextPicGettingNum(self.current_num)\n		self.pre_num = self.previousPicGettingNum(self.current_num)\n		return True\n\n	def goOnNumber(self, number):\n		if self.total_pictures == 0 : return False\n		number = int(number)\n		if 0 <= number < self.total_pictures:\n			file_path = self.filePathFromPicNumber(number)\n			if self.updateImages(file_path): return True\n		else: return False\n\n	def firstPicture(self):\n		if self.total_pictures > 1: \n			if self.goOnNumber(0): return True\n\n	def lastPicture(self):\n		if self.total_pictures > 1: \n			if self.goOnNumber(self.total_pictures - 1): return True\n\n	def restoreImage(self): \n		if self.throwed_file:\n			restore_file_name = self.throwed_file.pop()\n			restore_file_path = os.path.join(self.pic_dir, restore_file_name)\n			if Trash.search(restore_file_path):\n				file_name_in_trash = Trash.search(restore_file_path)[0][1]\n				if Trash.restore(file_name_in_trash):\n					self.updateImages(restore_file_path)\n					return True\n				else: return False\n			else: return False\n		else: return None\n\n	def nextOrFirst(self):\n		if self.folder_flip is True: return True\n		if self.current_num == self.total_pictures - 1 : return False\n		else: return True\n\n	def onPrepare(self, event):\n		\"\"\"\n		prepare the nex and previous pictures. it makes faster.\n		\"\"\"        \n		self.preparePictures()\n",
			"file": "imageCtrl.py",
			"file_size": 8928,
			"file_write_time": 1496722508000000,
			"settings":
			{
				"buffer_size": 8846,
				"line_ending": "Unix"
			}
		},
		{
			"file": "MenuBar/ViewerMenuBar.py",
			"settings":
			{
				"buffer_size": 9214,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: #--"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Remove Channel"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 428.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/sungyo/test.py",
		"/home/sungyo/Unison/Application/GoodViewer/BO/thumbnailctrl.py",
		"/opt/binarybox/module/python/IO.py",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/untitled.sublime-snippet",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/optionparser.sublime-snippet",
		"/home/sungyo/바탕화면/test.py",
		"/home/sungyo/Unison/Application/GoodViewer/MenuBar/ViewerMenuBar.py",
		"/home/sungyo/Unison/Application/GoodViewer/MenuBar/ThumbScrollMenuBar.py",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/jackpum_gel2.py",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/sub_gel2.py",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/list.txt",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/rename.sh",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/findAndExif.sh",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/exif2.sh",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/subject_gel.py",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/jackpum_gel.py",
		"/run/user/1000/gvfs/sftp:host=hp380/home/sungyo/Zentyal/mnt/sda/sungyo/문서/사진/각종바탕화면/ImageOfGod/slrclub/작품겔러리/gel_list.txt",
		"/home/sungyo/result.txt",
		"/home/sungyo/script.py",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/importcustom.sublime-snippet",
		"/opt/binarybox/module/python/OS.py",
		"/opt/binarybox/applications/check-pocketfi/check-pocketfi.py",
		"/run/user/1000/gvfs/sftp:host=192.168.0.215/opt/binarybox/crontab/boardparsing/board-noti-chongshin.py",
		"/run/user/1000/gvfs/sftp:host=192.168.0.215/opt/binarybox/bin/bin_server/gitup",
		"/home/sungyo/바탕화면/impress.js-master/index.html",
		"/home/sungyo/바탕화면/impress.js-master/css/impress-demo.css",
		"/home/sungyo/바탕화면/impress.js-master/index.html.old",
		"/home/sungyo/바탕화면/성도의 인사(옵션).sh",
		"/home/sungyo/바탕화면/impress.js-master/index2.html",
		"/home/sungyo/바탕화면/impress.js-master/index3.html",
		"/opt/binarybox/applications/telepy/teledemon",
		"/home/sungyo/websites/revival/www.1907revival.com/bbs/list0b5b.html.tmp",
		"/home/sungyo/18.Jb-01-2-1:21",
		"/home/sungyo/Unison/script/python/UserScript/check-ir6000.py",
		"/home/sungyo/바탕화면/60.1P-2-2-2:9.caf",
		"/home/sungyo/바탕화면/22.SS-8-2-8:6.caf",
		"/backup/sungyo/tomboy/Backup/9672250d-8c0b-4b39-97a5-bfa5d7e5298c.note",
		"/opt/binarybox/bin/bin-default/binarybox-setup",
		"/opt/binarybox/bin/bin-default/getdir",
		"/opt/binarybox/bin/bin-default/noti",
		"/opt/binarybox/applications/telepy/telemessage",
		"/opt/binarybox/applications/telepy/telepy.py",
		"/home/sungyo/Unison/script/Study/getopts.sh",
		"/opt/binarybox/applications/telepy/telepy_demon.py",
		"/opt/binarybox/applications/telepy/telebot.py",
		"/opt/binarybox/applications/telepy/telepy",
		"/run/user/1000/gvfs/sftp:host=zentyal.ext,port=22222/opt/binarybox/bin/bin_server/gitup",
		"/opt/binarybox/binarybox-setup",
		"/run/user/1000/gvfs/sftp:host=zentyal.ext,port=22222/opt/binarybox/module/BinaryManager/Snmp.py",
		"/run/user/1000/gvfs/sftp:host=zentyal.ext,port=22222/opt/binarybox/applications/dhcpmonitor/dhcpmonitor.py",
		"/run/user/1000/gvfs/sftp:host=zentyal.ext,port=22222/opt/binarybox/applications/dhcpmonitor/README",
		"/run/user/1000/gvfs/sftp:host=zentyal.ext,port=22222/opt/binarybox/module/BinaryManager/Snmp.pyc",
		"/opt/binarybox/applications/tom_start/bin/tom-start",
		"/opt/binarybox/applications/telepy/READ",
		"/opt/binarybox/applications/telepy/token.key",
		"/opt/binarybox/applications/telepy/telepy.ini",
		"/opt/binarybox/applications/telebot/telebot",
		"/opt/binarybox/bin/bin-private/telebot",
		"/opt/binarybox/bin/bin-default/gitup",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/nodemanager",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/configtest",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/example.cfg",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/example.ini",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/hotssh",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/NodeManager.sublime-workspace",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/.gitignore",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/NodeManager.sublime-project",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/NodeManager/nodes/zentyal.node",
		"/run/user/1000/gvfs/sftp:host=hp380/opt/binarybox/.gitignore",
		"/opt/binarybox/bin/bin-private/gitup",
		"/opt/binarybox/.gitignore",
		"/home/sungyo/Unison/script/bin/vbox",
		"/opt/binarybox/applications/greek_bible/sblgnt.py",
		"/opt/binarybox/applications/greek_bible/greek_bible.py",
		"/opt/binarybox/README",
		"/home/sungyo/binarybox/binarybox-setup",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/parseradd.sublime-snippet",
		"/opt/binarybox/bin/bin-default/logging",
		"/opt/binarybox/bin/bin-default/log",
		"/home/sungyo/binarybox/setup.sh",
		"/home/sungyo/bin/smplayer_cli",
		"/home/sungyo/opt/bin/logging",
		"/home/sungyo/bin/bin_vbox/vbox",
		"/backup/sungyo/openvpn/Ohsan-vpn/cacert.pem",
		"/backup/sungyo/openvpn/Ohsan-vpn/Ohsan-client.ovpn",
		"/backup/sungyo/openvpn/Ohsan-vpn/Open-VPN.pem",
		"/backup/sungyo/openvpn/Ohsan-vpn/7CD591F229A24A53.pem",
		"/run/user/1000/gvfs/sftp:host=zentyal.int/rpool/2TB/opt/opt/UserScript/local/dhcp_parser/dhcp_parser",
		"/run/user/1000/gvfs/sftp:host=zentyal.int/rpool/2TB/opt/opt/UserScript/local/dhcp_parser/dhcpd_conf_parser",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/local/dhcpmonitor/dhcpmonitor.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/_Core.py",
		"/media/sungyo/Win 8.1 Pro/bootmgr",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/Snmp.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/PrintOut.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/__init__.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/local/dhcpmonitor.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/local/dhcp_monitoring/dhcp_parser",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/.dhcpmonitor.dat",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/LogTail.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/home/sungyo/test.txt",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/share/BinaryManager/Ping.py",
		"/run/user/1000/gvfs/sftp:host=zentyal,port=22222/opt/UserScript/local/dhcp_monitoring/dhcpd_conf_parser",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/#--.sublime-snippet",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/startpython.sublime-snippet",
		"/home/sungyo/Unison/script/module/python/TRASH.py",
		"/home/sungyo/Unison/script/실행아이콘/setup.sh",
		"/home/sungyo/Unison/script/module/python/OS.py",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/Terminal/Default (Linux).sublime-keymap",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/sungyo/test.txt",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/Jedi - Python autocompletion/Default.sublime-keymap",
		"/home/sungyo/Unison/script/module/python/BinaryManager/__init__.py",
		"/home/sungyo/Unison/script/module/python/BinaryManager/WhereIs.py",
		"/home/sungyo/Unison/script/module/python/BinaryManager/_Core.py",
		"/home/sungyo/Unison/script/python/server/dhcp_monitoring.py",
		"/home/sungyo/Unison/script/python/xml/xml_example.py",
		"/home/sungyo/다운로드/graylog-2.1.2/bin/graylogctl",
		"/home/sungyo/바탕화면/logcheck",
		"/home/sungyo/Unison/script/module/python/IO.py",
		"/home/sungyo/Unison/script/module/python/BinaryManager/LogTail.py",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/Default.sublime-keymap",
		"/backup/sungyo/Unison-real/script/sublime-text-2/Packages/User/userimport.sublime-snippet",
		"/backup/sungyo/Unison-real/script/module/python/BinaryManager/WhereIs.py",
		"/home/sungyo/다운로드/vimrc",
		"/home/sungyo/Unison/script/module/python/BinaryManager/Core.py",
		"/home/sungyo/Unison/script/module/python/BinaryManager/_Core.pyc"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"print",
			"print\\",
			"print",
			"Log.Logger",
			"print",
			"gettingImgForPanel",
			"current_img",
			"current_imgf",
			"current_img",
			"bitmap",
			"log",
			" opj",
			"opj",
			"paste",
			"Object",
			"ojbect",
			"myroot",
			"TheClipboard",
			"copy",
			"print",
			"Log",
			"deleteI",
			"onUpdateImages",
			"updateImages",
			"update",
			"load",
			"self.updateImages",
			" updateImages",
			"updateImages",
			"nextFolder",
			"update",
			"next_pic_path",
			"updateImages",
			"Show",
			"ViewerMenuBar",
			"ShowFullScreen",
			"fullsc",
			"full",
			"Full",
			"FullSc",
			"_full_screen_state",
			"full",
			"SetFocus",
			"orRightClickMenuSelection",
			"menu_title_by_id",
			"menu_titles",
			"onLeftDown",
			"ImageCtrl",
			"frame",
			"list_item_clicked",
			"menu_title_by_id",
			"RightClickMenuSelection",
			"list_item_clicked",
			"Menu(",
			"Menu",
			"menu_title_by_id",
			"menu_titles",
			"right_click_context",
			"onLeftUp",
			"click",
			"Searching",
			"onClick",
			"folder_flip",
			"slide",
			"onNextPicture",
			"slide",
			"previousPicGettingNum",
			"sort",
			"wild",
			"loadimage",
			"nextPicture",
			"\n	",
			"update",
			"nextPicture",
			"nextFolder",
			"updateimages",
			"nextPic",
			"right",
			"update",
			"load",
			"wild",
			"update",
			"while",
			"wildcard",
			"break",
			"wildcard",
			"print",
			"file_path",
			"path",
			"dir_path",
			"updateImage",
			"updateImages",
			"pic_dir",
			"pre v",
			"pre",
			"folder_flip",
			"ImageCtrl",
			"folder_flip",
			"imageCtrl",
			"folder_flip",
			"imageCtrl",
			"def next",
			"def nextPicture",
			"nextPicture",
			"folder",
			"folder_flip",
			"_folder_flip",
			"configur",
			"folder",
			"dir_flip",
			"_folder_flip",
			"onNextPicture",
			"def onNextPicture",
			"onNextPicture",
			"MenuBar",
			"onNext_picture",
			"Commend",
			"fullSceenState",
			"_full_screen_state\\",
			"_full_screen_state",
			"ImageCtrl",
			"_full_screen_state",
			"Panel",
			"way_to_go",
			"def nextPicture",
			"nextPicture",
			"class ImageCtrl",
			"ImageCtrl"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"onRightClickMenuSelection",
			"self.menu_title_by_id",
			"orRightClickMenuSelection",
			"which_way_to_go",
			"self.gel_list_file",
			"\n",
			"삼하5:",
			"",
			"\n",
			"}\n",
			"}",
			"{n}",
			"}\n",
			"}",
			"{n}",
			"\n",
			" ",
			"\n",
			" ",
			"(\\1)",
			"",
			"출3:\\1)",
			"출3:\\1) ",
			"출3:\\1)",
			"",
			"행4:\\1)",
			"행",
			"\n",
			"(\\1)",
			"\n",
			"행28:\\1)",
			"",
			"행27:\\1)",
			"삼하",
			" 삼하3:\\1)",
			" ",
			"dir_\\1",
			"base_dir",
			"시15:\\1)",
			" ",
			"@@logserver.int:1025",
			":1024",
			"\\1)",
			"벧전1:\\1)",
			"\n",
			"히6:\\1)",
			"\\1)",
			" ",
			"\n",
			" \n",
			"\n",
			" \n",
			"\n",
			"get_process_output",
			"눅",
			"행",
			"",
			"'",
			", ",
			" ",
			"self.dhcp_list",
			"dhcp_servers",
			"renew_dhcp_list",
			"renew_snmp_list",
			"dhcpd_conf",
			"snmp_parser",
			"",
			"self._os",
			"get_process_output",
			"= self.shelve",
			"self._test",
			"self._binary_whereis",
			"\n",
			"눅\\1:\\2)",
			"눅",
			"</verse>\n",
			"</verse>a\n",
			"abbri_eng",
			"",
			"\n",
			", ",
			"'\\1'",
			", ",
			"",
			"\n",
			"",
			"\n",
			" ",
			",\n",
			"",
			", ",
			"'\\1'",
			"",
			"\n",
			"",
			"\n",
			" ",
			"\\2,",
			"\\2",
			"",
			"잠",
			"사",
			"\\1) ",
			"",
			"\\1)",
			"",
			" ",
			"",
			"시73:\\1)",
			"",
			"\n",
			" ",
			"{\n",
			"\n",
			"{\n",
			";\n}\n}\n",
			";\n}\n",
			";\n",
			"Yong Joon Moon: ",
			"Sungyo Kim: ",
			"",
			"\nstring.",
			"string.",
			"",
			"\nstring.",
			"string.\n",
			"",
			"\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "GoodViewer.py",
					"settings":
					{
						"buffer_size": 3555,
						"regions":
						{
						},
						"selection":
						[
							[
								2974,
								2974
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2544.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "View/ViewerPanel.py",
					"settings":
					{
						"buffer_size": 11142,
						"regions":
						{
						},
						"selection":
						[
							[
								10917,
								10917
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11224.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "imageCtrl.py",
					"settings":
					{
						"buffer_size": 8846,
						"regions":
						{
						},
						"selection":
						[
							[
								5951,
								5951
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6822.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "MenuBar/ViewerMenuBar.py",
					"settings":
					{
						"buffer_size": 9214,
						"regions":
						{
						},
						"selection":
						[
							[
								8867,
								8867
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8031.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 44.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 160.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 220.0,
	"status_bar_visible": true
}
